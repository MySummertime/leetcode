use merge sort method


  when we need to change a list, a dummy node representing the previous head is usually needed;

  /**
   * Definition for singly-linked list.
   */
  struct ListNode {
      int val;
      ListNode *next;
      ListNode() : val(0), next(nullptr) {}
      ListNode(int x) : val(x), next(nullptr) {}
      ListNode(int x, ListNode *next) : val(x), next(next) {}
  };

  class Solution {
  public:
      ListNode* mergeKLists (vector<ListNode*>& lists) {
          if (!lists.size() || (&lists == nullptr)) {
              return nullptr;
          }
          return merge(lists, 0, lists.size() - 1);
      }

  private:
      ListNode* merge (vector<ListNode*>& _list, int _l, int _r) {
          if (_l == _r) {
              return _list[_l];
          }
          if (_l > _r) {
              return nullptr;
          }
          int mid = (_l + _r) >> 1;
          return mergeTow(merge(_list, _l, mid), merge(_list, mid + 1, _r));
      }

      ListNode* mergeTow (ListNode* node1, ListNode* node2) {
          if (!node1 || (!node2)) {
              return node1 ? node1 : node2;
          }
          ListNode dummy;
          ListNode* tail = &dummy;
          ListNode* ptr1 = node1;
          ListNode* ptr2 = node2;
          while (ptr1 && ptr2) {
              if (ptr1->val < ptr2->val) {
                  tail->next = ptr1;
                  ptr1 = ptr1->next;
              }
              else {
                  tail->next = ptr2;
                  ptr2 = ptr2->next;
              }
              tail = tail->next;
          }
          tail->next = (ptr1 ? ptr1 : ptr2);
          return dummy.next;
      }
  };
