1. we use 2 array to simulate the FIFO queue in TS;


    /**
     * Your MyQueue object will be instantiated and called as such:
     * var obj = new MyQueue()
     * obj.push(x)
     * var param_2 = obj.pop()
     * var param_3 = obj.peek()
     * var param_4 = obj.empty()
    **/

    class MyQueue {
        constructor() {}

        push(x: number): void {
            this.i_st.push(x);
        }

        pop(): number {
            !this.o_st.length && this.transfer();
            return this.o_st.pop();
        }

        peek(): number {
            !this.o_st.length && this.transfer();
            return this.o_st[this.o_st.length - 1];
        }

        empty(): boolean {
            return this.o_st.length == 0 && this.i_st.length == 0;
        }

        private i_st: number[] = [];
        private o_st: number[] = [];

        private transfer(): void {
            while (this.i_st.length) {
                this.o_st.push(this.i_st.pop());
            }
        }
    }




2. we use 1 array to simulate the FIFO queue in TS;


    /**
     * Your MyQueue object will be instantiated and called as such:
     * var obj = new MyQueue()
     * obj.push(x)
     * var param_2 = obj.pop()
     * var param_3 = obj.peek()
     * var param_4 = obj.empty()
    **/

    class MyQueue {
        st = [];

        constructor() {}

        push(x: number): void {
            this.st.push(x);
        }

        pop(): number {
            return this.st.shift();
        }

        peek(): number {
            return this.st[0];
        }

        empty(): boolean {
            return !this.st.length;
        }
    }


3. we use 2 array to simulate the FIFO queue in JS;


    /**
     * Your MyQueue object will be instantiated and called as such:
     * var obj = new MyQueue()
     * obj.push(x)
     * var param_2 = obj.pop()
     * var param_3 = obj.peek()
     * var param_4 = obj.empty()
    **/
    var MyQueue = function() {
        this.i_st = [];
        this.o_st = [];
    };
    /**
     * @param {number} x
     * @return {void}
     */
    MyQueue.prototype.push = function(x) {
        this.i_st.push(x);
    };
    /**
     * @return {number}
     */
    MyQueue.prototype.pop = function() {
        !this.o_st.length && this.transfer();
        return this.o_st.pop();
    };
    /**
     * @return {number}
     */
    MyQueue.prototype.peek = function() {
        !this.o_st.length && this.transfer();
        return this.o_st[this.o_st.length - 1];
    };
    /**
     * @return {boolean}
     */
    MyQueue.prototype.empty = function() {
        return this.i_st.length == 0 && this.o_st.length == 0;
    };
    /**
     * @return {number}
     */
    MyQueue.prototype.transfer = function() {
        while (this.i_st.length) {
            this.o_st.push(this.i_st.pop());
        }
    }
