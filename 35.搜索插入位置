35. Search Insert Position

1. The premis of using dichotomy is that the array is ordered;
2. Boundary condition is leftIndex == rightIndex for left-closed & right-closed interval;
3. Last loop: leftIndex == rightIndex, if didn't find, then leftIndex > rightIndex, exit loop;

class Solution {
public:
    int searchInsert(vector<int>& nums, int target){
        if(nums.size() == 0){
            return 0;
        }
        else if(nums.size() == 1){
            while(target <= nums[0]){
                return 0;
            }
            return 1;
        }
        int leftIndex = 0;
        int rightIndex = nums.size() - 1;
        int midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        while(leftIndex <= rightIndex){     //排序数组中，取左闭右闭区间，进行二分
            if(nums[midIndex] == target){
                return midIndex;
            }
            else if(nums[midIndex] < target){
                leftIndex = midIndex + 1;
            }
            else{
                rightIndex = midIndex - 1;
            }
            midIndex = leftIndex + (rightIndex - leftIndex) / 2;
        }
        return rightIndex + 1;
    }
};
