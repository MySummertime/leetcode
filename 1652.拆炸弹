1652. Defuse the bomb
vector & traverse
1. judge the k in which range
2. the sum of the next k numbers:
   if the current index (i + tmp) is in the original range of code.size(), then (i + tmp) % code.size() equals the ith element itself;
   if the current index (i + tmp) is out of the original range of code.size(), then (i + tmp) % code.size() equals the value of the ith element;
3. the sum of the previous k numbers:
   if the current index (i + tmp + code.size()) is in the original range of code.size(), then (i + tmp + code.size() % code.size()) equals the ith element itself;
   if the current index (i + tmp + code.size()) is out of the original range of code.size(), then (i + tmp + code.size() % code.size()) equals the value of the ith element;
   
class Solution{
public:
    vector<int> decrypt(vector<int>& code, int k){
        vector<int> ans = code;
        int sum = 0;
        int tmp = 0;
        if(k == 0){
            for(int i = 0; i < ans.size(); ++i){
                ans[i] = 0;
            }
        }
        else if(k > 0){
            for(int i = 0; i < code.size(); ++i){
                sum = 0;
                tmp = 0;
                while(tmp < k){
                    ++tmp;
                    sum += code[(i + tmp) % code.size()];
                }
                ans[i] = sum;
            }
        }
        else{
            for(int i = 0; i < code.size(); ++i){
                sum = 0;
                tmp = 0;
                while(tmp > k){
                    --tmp;
                    sum += code[(i + tmp + code.size()) % code.size()];
                }
                ans[i] = sum;
            }
        }
        return ans;
    }

};
