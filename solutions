1913. Maximum product difference between two pairs
1. Traverse nums[] one time. do judge every time an element is encountered in two way. time better;
2. Sort nums[] first, and then traverse it, find the two minimum and two maximum directly. time little worse;

class Solution{
public:
    int maxProductDifference(vector<int> & nums){
        //the two maximums，with max1 > max2
        int max1 = max(nums[0], nums[1]);
        int max2 = min(nums[0], nums[1]);
        //the two minimums，with min1 > min2
        int min1 = max(nums[0], nums[1]);
        int min2 = min(nums[0], nums[1]);

        for(int i = 2; i < nums.size(); i++){
            int tmp = nums[i];
            if(tmp > max1){
                max2 = max1;
                max1 = tmp;
            }
            else if(tmp > max2){
                max2 = tmp;
            }
            if(tmp < min2){
                min1 = min2;
                min2 = tmp;
            }
            else if(tmp < min1){
                min1 = tmp;
            }
        }
        return max1 * max2 - min1 * min2;
    }

};

1805. Number of Different Integers in a String
1. Use regular expressions to match strings
    1. re.findall(pattern, string, flag = 0)
    2. find all sub_strings from string which matches pattern, return them within an array
2. Use Set to de-duplicate
    1. auxilliary array ans contains all sub-elements
    2. use for... to import all elements into set
    3. because of ignoring all leading zeros, we use int(i) to traverse every i into int first

class Solution:
    def numDifferentIntegers(self, word: str) -> int:
        ans = re.findall("\d+", word)
        return len(set([int(i) for i in ans]))
