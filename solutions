1913. Maximum product difference between two pairs
1. Traverse nums[] one time. do judge every time an element is encountered in two way. time better;
2. Sort nums[] first, and then traverse it, find the two minimum and two maximum directly. time little worse;

class Solution{
public:
    int maxProductDifference(vector<int> & nums){
        //the two maximums，with max1 > max2
        int max1 = max(nums[0], nums[1]);
        int max2 = min(nums[0], nums[1]);
        //the two minimums，with min1 > min2
        int min1 = max(nums[0], nums[1]);
        int min2 = min(nums[0], nums[1]);

        for(int i = 2; i < nums.size(); i++){
            int tmp = nums[i];
            if(tmp > max1){
                max2 = max1;
                max1 = tmp;
            }
            else if(tmp > max2){
                max2 = tmp;
            }
            if(tmp < min2){
                min1 = min2;
                min2 = tmp;
            }
            else if(tmp < min1){
                min1 = tmp;
            }
        }
        return max1 * max2 - min1 * min2;
    }

};

1929. Concatenation of Arrays
1. using the operator(...);
2. parse the array into a sequence of parameters seperated by commas;

function getConcatenation(nums: number[]): number[]{
    return [...nums, nums];
};
