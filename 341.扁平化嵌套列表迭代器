iterate the entire list, and use an auxiliary stack to flatten the list


  /**
   * // This is the interface that allows for creating nested lists.
   * // You should not implement it, or speculate about its implementation
   * class NestedInteger {
   *   public:
   *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
   *     bool isInteger() const;
   *
   *     // Return the single integer that this NestedInteger holds, if it holds a single integer
   *     // The result is undefined if this NestedInteger holds a nested list
   *     int getInteger() const;
   *
   *     // Return the nested list that this NestedInteger holds, if it holds a nested list
   *     // The result is undefined if this NestedInteger holds a single integer
   *     const vector<NestedInteger> &getList() const;
   * };
   */

   /**
   * Your NestedIterator object will be instantiated and called as such:
   * NestedIterator i(nestedList);
   * while (i.hasNext()) cout << i.next();
   */

  class NestedIterator {
  public:
      NestedIterator(std::vector<NestedInteger> &nestedList) {
          for (int i = nestedList.size() - 1; i >= 0; --i) {
              st.push(nestedList[i]);
          }
      }

      int next() {
          NestedInteger topInt = st.top();
          st.pop();
          return topInt.getInteger();
      }

      bool hasNext() {
          while (!st.empty()) {
              NestedInteger topInt = st.top();
              if (topInt.isInteger()) {
                  return true;
              }
              st.pop();
              for (int i = topInt.getList().size() - 1; i >= 0; --i) {
                  st.push(topInt.getList()[i]);
              }
          }
          return false;
      }

  private:
      std::stack<NestedInteger> st;
  };
