use 1 list to store the flattened elements


  # """
  # This is the interface that allows for creating nested lists.
  # You should not implement it, or speculate about its implementation
  # """
  #class NestedInteger:
  #    def isInteger(self) -> bool:
  #        """
  #        @return True if this NestedInteger holds a single integer, rather than a nested list.
  #        """
  #
  #    def getInteger(self) -> int:
  #        """
  #        @return the single integer that this NestedInteger holds, if it holds a single integer
  #        Return None if this NestedInteger holds a nested list
  #        """
  #
  #    def getList(self) -> [NestedInteger]:
  #        """
  #        @return the nested list that this NestedInteger holds, if it holds a nested list
  #        Return None if this NestedInteger holds a single integer
  #        """

  class NestedIterator(object):

      def __init__(self, nestedList):
          self.st = []
          for i in range(len(nestedList) - 1, -1, -1):
              self.st.append(nestedList[i])

      def next(self):
          topInt = self.st.pop()
          return topInt.getInteger()

      def hasNext(self):
          while self.st:
              topInt = self.st[-1]
              if topInt.isInteger():
                  return True
              self.st.pop()
              for i in range(len(topInt.getList()) - 1, -1, -1):
                  self.st.append(topInt.getList()[i])
          return False


  # Your NestedIterator object will be instantiated and called as such:
  # i, v = NestedIterator(nestedList), []
  # while i.hasNext(): v.append(i.next())
