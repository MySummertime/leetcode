use dp method


  class Solution {
  public:
      bool wordBreak(string s, vector<string>& wordDict) {
          int len = s.length();
          std::unordered_set<string> set(wordDict.begin(), wordDict.end());
          std::vector<bool> dp(len + 1, false);
          dp[0] = true;

          for (int i = 1; i <= len; ++i) {
              for (int j = i - 1; j >= 0; --j) {
                  if (dp[i]) {
                      break;
                  }
                  if (!dp[j]) {
                      continue;
                  }
                  string sub_str = s.substr(j, i - j);
                  if (set.find(sub_str) != set.end() && dp[j]) {
                      dp[i] = true;
                      break;
                  }
              }
          }
          return dp[len];
      }
  };
