1. using 2 queues to simulate the stack, one of the queues is for auxilliary use;


  /**
   * Your MyStack object will be instantiated and called as such:
   * MyStack* obj = new MyStack();
   * obj->push(x);
   * int param_2 = obj->pop();
   * int param_3 = obj->top();
   * bool param_4 = obj->empty();
  **/

  class MyStack {
  public:
      MyStack() {}

      void push(int x) {
          que1.push(x);
      }

      int pop() {
          int len = que1.size();
          while (--len >= 0) {
              que2.push(que1.front());
              que1.pop();
          }
          int result = que1.front();
          que1.pop();
          que1 = que2;
          while (!que2.empty()) {
              que2.pop();
          }
          return result;
      }

      int top() {
          return que1.back();
      }

      bool empty() {
          return que1.empty();
      }

  private:
      std::queue<int> que1;
      std::queue<int> que2;   //auxilliary queue

  };
  
  

2. using 1 queue to simulate the stack;

  create a circle within the queue, just return the que.front() element;


  /**
   * Your MyStack object will be instantiated and called as such:
   * MyStack* obj = new MyStack();
   * obj->push(x);
   * int param_2 = obj->pop();
   * int param_3 = obj->top();
   * bool param_4 = obj->empty();
  **/
  
  class MyStack {
  public:
      MyStack() {}

      void push(int x) {
          que.push(x);
      }

      int pop() {
          int len = que.size();
          --len;
          while (len--) {
              que.push(que.front());
              que.pop();
          }
          int ans = que.front();
          que.pop();
          return ans;
      }

      int top() {
          return que.back();
      }

      bool empty() {
          return que.empty();
      }

  private:
      std::queue<int> que;

  };
